{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isCellDescriptor = exports.isObject = exports.isString = exports.isNumber = exports.isBoolean = exports.buildSheetFromMatrix = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _xlsx = require('xlsx');\n\nvar _xlsx2 = _interopRequireDefault(_xlsx);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isBoolean = function isBoolean(maybeBoolean) {\n  return typeof maybeBoolean === 'boolean';\n};\n\nvar isNumber = function isNumber(maybeNumber) {\n  return typeof maybeNumber === 'number';\n};\n\nvar isString = function isString(maybeString) {\n  return typeof maybeString === 'string';\n};\n\nvar isObject = function isObject(maybeObject) {\n  return maybeObject !== null && (typeof maybeObject === 'undefined' ? 'undefined' : _typeof(maybeObject)) === 'object';\n};\n\nvar isCellDescriptor = function isCellDescriptor(maybeCell) {\n  return isObject(maybeCell) && 'v' in maybeCell;\n};\n\nvar originDate = new Date(Date.UTC(1899, 11, 30));\n\nvar buildExcelDate = function buildExcelDate(value, is1904) {\n  var epoch = Date.parse(value + (is1904 ? 1462 : 0));\n  return (epoch - originDate) / 864e5;\n};\n\nvar buildSheetFromMatrix = function buildSheetFromMatrix(data) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var workSheet = {};\n  var range = {\n    s: {\n      c: 1e7,\n      r: 1e7\n    },\n    e: {\n      c: 0,\n      r: 0\n    }\n  };\n  if (!Array.isArray(data)) throw new Error('sheet data is not array');\n\n  for (var R = 0; R !== data.length; R += 1) {\n    for (var C = 0; C !== data[R].length; C += 1) {\n      if (!Array.isArray(data[R])) throw new Error(R + 'th row data is not array');\n      if (range.s.r > R) range.s.r = R;\n      if (range.s.c > C) range.s.c = C;\n      if (range.e.r < R) range.e.r = R;\n      if (range.e.c < C) range.e.c = C;\n\n      if (data[R][C] === null) {\n        continue; // eslint-disable-line\n      }\n\n      var cell = isCellDescriptor(data[R][C]) ? data[R][C] : {\n        v: data[R][C]\n      };\n\n      var cellRef = _xlsx2.default.utils.encode_cell({\n        c: C,\n        r: R\n      });\n\n      if (isNumber(cell.v)) {\n        cell.t = 'n';\n      } else if (isBoolean(cell.v)) {\n        cell.t = 'b';\n      } else if (cell.v instanceof Date) {\n        cell.t = 'n';\n        cell.v = buildExcelDate(cell.v);\n        cell.z = cell.z || _xlsx2.default.SSF._table[14]; // eslint-disable-line no-underscore-dangle\n\n        /* eslint-disable spaced-comment, no-trailing-spaces */\n\n        /***\n         * Allows for an non-abstracted representation of the data\n         * \n         * example: {t:'n', z:10, f:'=AVERAGE(A:A)'}\n         * \n         * Documentation:\n         * - Cell Object: https://sheetjs.gitbooks.io/docs/#cell-object\n         * - Data Types: https://sheetjs.gitbooks.io/docs/#data-types\n         * - Format: https://sheetjs.gitbooks.io/docs/#number-formats\n         **/\n\n        /* eslint-disable spaced-comment, no-trailing-spaces */\n      } else if (isObject(cell.v)) {\n        cell.t = cell.v.t;\n        cell.f = cell.v.f;\n        cell.z = cell.v.z;\n      } else {\n        cell.t = 's';\n      }\n\n      if (isNumber(cell.z)) cell.z = _xlsx2.default.SSF._table[cell.z]; // eslint-disable-line no-underscore-dangle\n\n      workSheet[cellRef] = cell;\n    }\n  }\n\n  if (range.s.c < 1e7) {\n    workSheet['!ref'] = _xlsx2.default.utils.encode_range(range);\n  }\n\n  if (options['!cols']) {\n    workSheet['!cols'] = options['!cols'];\n  }\n\n  if (options['!merges']) {\n    workSheet['!merges'] = options['!merges'];\n  }\n\n  return workSheet;\n};\n\nexports.buildSheetFromMatrix = buildSheetFromMatrix;\nexports.isBoolean = isBoolean;\nexports.isNumber = isNumber;\nexports.isString = isString;\nexports.isObject = isObject;\nexports.isCellDescriptor = isCellDescriptor;","map":{"version":3,"sources":["../src/helpers.js"],"names":["isBoolean","isNumber","isString","isObject","maybeObject","isCellDescriptor","originDate","Date","buildExcelDate","epoch","value","is1904","buildSheetFromMatrix","options","workSheet","range","s","c","r","e","Array","R","data","C","cell","v","cellRef","XLSX"],"mappings":"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","sourcesContent":["import XLSX from 'xlsx';\n\nconst isBoolean = maybeBoolean => typeof maybeBoolean === 'boolean';\nconst isNumber = maybeNumber => typeof maybeNumber === 'number';\nconst isString = maybeString => typeof maybeString === 'string';\nconst isObject = maybeObject => maybeObject !== null && typeof maybeObject === 'object';\nconst isCellDescriptor = maybeCell => isObject(maybeCell) && 'v' in maybeCell;\n\nconst originDate = new Date(Date.UTC(1899, 11, 30));\n\nconst buildExcelDate = (value, is1904) => {\n  const epoch = Date.parse(value + (is1904 ? 1462 : 0));\n  return (epoch - originDate) / (864e5);\n};\n\nconst buildSheetFromMatrix = (data, options = {}) => {\n  const workSheet = {};\n  const range = {s: {c: 1e7, r: 1e7}, e: {c: 0, r: 0}};\n\n  if (!Array.isArray(data)) throw new Error('sheet data is not array');\n\n  for (let R = 0; R !== data.length; R += 1) {\n    for (let C = 0; C !== data[R].length; C += 1) {\n      if (!Array.isArray(data[R])) throw new Error(`${R}th row data is not array`);\n\n      if (range.s.r > R) range.s.r = R;\n      if (range.s.c > C) range.s.c = C;\n      if (range.e.r < R) range.e.r = R;\n      if (range.e.c < C) range.e.c = C;\n      if (data[R][C] === null) {\n        continue; // eslint-disable-line\n      }\n      const cell = isCellDescriptor(data[R][C]) ? data[R][C] : {v: data[R][C]};\n      const cellRef = XLSX.utils.encode_cell({c: C, r: R});\n      if (isNumber(cell.v)) {\n        cell.t = 'n';\n      } else if (isBoolean(cell.v)) {\n        cell.t = 'b';\n      } else if (cell.v instanceof Date) {\n        cell.t = 'n';\n        cell.v = buildExcelDate(cell.v);\n        cell.z = cell.z || XLSX.SSF._table[14]; // eslint-disable-line no-underscore-dangle\n\n      /* eslint-disable spaced-comment, no-trailing-spaces */\n      /***\n       * Allows for an non-abstracted representation of the data\n       * \n       * example: {t:'n', z:10, f:'=AVERAGE(A:A)'}\n       * \n       * Documentation:\n       * - Cell Object: https://sheetjs.gitbooks.io/docs/#cell-object\n       * - Data Types: https://sheetjs.gitbooks.io/docs/#data-types\n       * - Format: https://sheetjs.gitbooks.io/docs/#number-formats\n       **/\n      /* eslint-disable spaced-comment, no-trailing-spaces */\n      } else if (isObject(cell.v)) {\n        cell.t = cell.v.t;\n        cell.f = cell.v.f;\n        cell.z = cell.v.z;\n      } else {\n        cell.t = 's';\n      }\n      if (isNumber(cell.z)) cell.z = XLSX.SSF._table[cell.z]; // eslint-disable-line no-underscore-dangle\n      workSheet[cellRef] = cell;\n    }\n  }\n  if (range.s.c < 1e7) {\n    workSheet['!ref'] = XLSX.utils.encode_range(range);\n  }\n  if (options['!cols']) {\n    workSheet['!cols'] = options['!cols'];\n  }\n  if (options['!merges']) {\n    workSheet['!merges'] = options['!merges'];\n  }\n  return workSheet;\n};\n\nexport {buildSheetFromMatrix, isBoolean, isNumber, isString, isObject, isCellDescriptor};\n"]},"metadata":{},"sourceType":"script"}